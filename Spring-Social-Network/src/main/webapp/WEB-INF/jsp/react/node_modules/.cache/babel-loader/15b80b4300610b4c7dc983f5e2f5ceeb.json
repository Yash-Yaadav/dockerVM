{"ast":null,"code":"import _slicedToArray from\"/root/Spring-Social-Network/src/main/webapp/WEB-INF/jsp/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{Route,Switch,BrowserRouter,Redirect}from'react-router-dom';import Navbar,{ResultsProvider,UserIdProvider}from'./components/Navbar';import NewsFeed from'./components/NewsFeed';import Search from'./components/Search';import Profile from\"./pages/Profile\";import Connections from\"./components/Connections\";import FriendsProfilePage from\"./pages/FriendsProfilePage\";import Chat from\"./pages/Chat\";//import ConnectionsPage from './pages/ConnectionsPage';\nimport SinglePost from\"./components/SinglePost\";import GlobalContext from\"./contexts/GlobalContext\";import Messenger from\"./components/Messenger\";import DataServices from\"./services/DataServices\";import Stomp from\"stompjs\";import SockJS from\"sockjs-client\";var SearchContext=React.createContext({});function App(props){var SockJSr=new SockJS(\"/ws\");var _React$useState=React.useState({}),_React$useState2=_slicedToArray(_React$useState,2),authenticatedUser=_React$useState2[0],setAuthenticatedUser=_React$useState2[1];var _React$useState3=React.useState({}),_React$useState4=_slicedToArray(_React$useState3,2),activeChat=_React$useState4[0],setActiveChat=_React$useState4[1];var _React$useState5=React.useState([]),_React$useState6=_slicedToArray(_React$useState5,2),chatMessages=_React$useState6[0],setChatMessages=_React$useState6[1];var _React$useState7=React.useState([]),_React$useState8=_slicedToArray(_React$useState7,2),connections=_React$useState8[0],setConnections=_React$useState8[1];var _React$useState9=React.useState(Stomp.over(SockJSr)),_React$useState10=_slicedToArray(_React$useState9,2),stompClient=_React$useState10[0],setStompClient=_React$useState10[1];var connect=function connect(){stompClient.connect({},onConnected,onError);};var onError=function onError(err){console.log(err);};var onConnected=function onConnected(){console.log(\"connected\");stompClient.subscribe(\"/user/\"+authenticatedUser.userId+\"/queue/messages\",onMessageReceived);};var onMessageReceived=function onMessageReceived(msg){var notification=JSON.parse(msg.body);console.log(msg.body);if(activeChat.userId===notification.userId){DataServices.findChatMessage(notification.chatNotificationId).then(function(message){var newMessages=chatMessages;newMessages.push(message.data);setChatMessages(newMessages);}).catch(function(error){console.log(error.response);});}else{console.log(\"Received a new message from \"+notification.firstName+\" \"+notification.lastName);}};React.useEffect(function(){connect();},[authenticatedUser]);return/*#__PURE__*/React.createElement(\"div\",{className:\"container-fluid p-0\"},/*#__PURE__*/React.createElement(BrowserRouter,null,/*#__PURE__*/React.createElement(GlobalContext.Provider,{value:{authenticatedUser:authenticatedUser,setAuthenticatedUser:setAuthenticatedUser,activeChat:activeChat,setActiveChat:setActiveChat,chatMessages:chatMessages,setChatMessages:setChatMessages,connections:connections,setConnections:setConnections,stompClient:stompClient}},/*#__PURE__*/React.createElement(Navbar,null),/*#__PURE__*/React.createElement(\"div\",{className:\"row m-0\"},/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(ResultsProvider,null,/*#__PURE__*/React.createElement(Redirect,{from:\"/index.html\",to:\"/\",exact:true}),/*#__PURE__*/React.createElement(Route,{path:\"/results\",component:Search}),/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/\",render:function render(props){return/*#__PURE__*/React.createElement(NewsFeed,props);}}),/*#__PURE__*/React.createElement(Route,{path:\"/profile\",component:Profile}),/*#__PURE__*/React.createElement(Route,{path:\"/connections\",component:Connections}),/*#__PURE__*/React.createElement(Route,{path:\"/profileAll\",component:function component(){return/*#__PURE__*/React.createElement(FriendsProfilePage,null);}}),/*#__PURE__*/React.createElement(Route,{path:\"/post\",component:SinglePost}),/*#__PURE__*/React.createElement(Route,{path:\"/chat\",component:Messenger})))))));}export default App;","map":{"version":3,"sources":["/root/Spring-Social-Network/src/main/webapp/WEB-INF/jsp/react/src/App.jsx"],"names":["React","Route","Switch","BrowserRouter","Redirect","Navbar","ResultsProvider","UserIdProvider","NewsFeed","Search","Profile","Connections","FriendsProfilePage","Chat","SinglePost","GlobalContext","Messenger","DataServices","Stomp","SockJS","SearchContext","createContext","App","props","SockJSr","useState","authenticatedUser","setAuthenticatedUser","activeChat","setActiveChat","chatMessages","setChatMessages","connections","setConnections","over","stompClient","setStompClient","connect","onConnected","onError","err","console","log","subscribe","userId","onMessageReceived","msg","notification","JSON","parse","body","findChatMessage","chatNotificationId","then","message","newMessages","push","data","catch","error","response","firstName","lastName","useEffect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Route, Switch, BrowserRouter, Redirect} from 'react-router-dom';\nimport Navbar, {ResultsProvider, UserIdProvider} from './components/Navbar';\nimport NewsFeed from './components/NewsFeed';\nimport Search from './components/Search';\nimport Profile from \"./pages/Profile\";\nimport Connections from \"./components/Connections\";\nimport FriendsProfilePage from \"./pages/FriendsProfilePage\";\nimport Chat from \"./pages/Chat\";\n//import ConnectionsPage from './pages/ConnectionsPage';\nimport SinglePost from \"./components/SinglePost\";\nimport GlobalContext from \"./contexts/GlobalContext\";\nimport Messenger from \"./components/Messenger\";\nimport DataServices from \"./services/DataServices\";\nimport Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\n\nconst SearchContext = React.createContext({});\n\nfunction App(props) {\n\n    let SockJSr = new SockJS(\"/ws\");\n    const [authenticatedUser, setAuthenticatedUser] = React.useState({});\n    const [activeChat, setActiveChat] = React.useState({});\n    const [chatMessages, setChatMessages] = React.useState([]);\n    const [connections, setConnections] = React.useState([]);\n    const [stompClient, setStompClient] = React.useState(Stomp.over(SockJSr));\n\n    const connect = () => {\n        stompClient.connect({}, onConnected, onError);\n    };\n\n    const onError = (err) => {\n        console.log(err);\n    };\n\n    const onConnected = () => {\n        console.log(\"connected\");\n        stompClient.subscribe(\n            \"/user/\" + authenticatedUser.userId + \"/queue/messages\",\n            onMessageReceived\n        );\n    };\n\n    const onMessageReceived = (msg) => {\n        const notification = JSON.parse(msg.body);\n        console.log(msg.body);\n\n        if (activeChat.userId === notification.userId) {\n            DataServices.findChatMessage(notification.chatNotificationId).then((message) => {\n                const newMessages = chatMessages;\n                newMessages.push(message.data);\n                setChatMessages(newMessages);\n            }).catch(error => { console.log(error.response) });\n        } else {\n            console.log(\"Received a new message from \" + notification.firstName + \" \" + notification.lastName);\n        }\n    };\n\n    React.useEffect(() => {\n        connect();\n    },[authenticatedUser]);\n\n    return (\n        <div className=\"container-fluid p-0\">\n            <BrowserRouter>\n                <GlobalContext.Provider value={{\n                    authenticatedUser,\n                    setAuthenticatedUser,\n                    activeChat,\n                    setActiveChat,\n                    chatMessages,\n                    setChatMessages,\n                    connections,\n                    setConnections,\n                    stompClient\n                }}>\n                    <Navbar/>\n                    <div className=\"row m-0\">\n                        <Switch>\n                            <ResultsProvider>\n                                <Redirect from=\"/index.html\" to=\"/\" exact/>\n                                <Route path=\"/results\" component={Search}/>\n                                <Route exact path=\"/\" render={(props) => <NewsFeed {...props}/>}/>\n                                <Route path=\"/profile\" component={Profile}/>\n                                <Route path=\"/connections\" component={Connections}/>\n                                <Route path=\"/profileAll\" component={() => <FriendsProfilePage/>}/>\n                                <Route path=\"/post\" component={SinglePost}/>\n                                {/*<Route exact path=\"/chat\" render={(props) => <Chat {...props} />}/>*/}\n                                <Route path=\"/chat\" component={Messenger}/>\n                            </ResultsProvider>\n                        </Switch>\n                    </div>\n                </GlobalContext.Provider>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}