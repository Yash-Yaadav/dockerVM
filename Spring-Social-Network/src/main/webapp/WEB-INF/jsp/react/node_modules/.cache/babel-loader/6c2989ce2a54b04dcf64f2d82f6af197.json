{"ast":null,"code":"import _toConsumableArray from\"/root/Spring-Social-Network/src/main/webapp/WEB-INF/jsp/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/root/Spring-Social-Network/src/main/webapp/WEB-INF/jsp/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import DataServices from'../services/DataServices';import{Button,message}from\"antd\";import ScrollToBottom from\"react-scroll-to-bottom\";import'./Chat.css';import{useRecoilValue,useRecoilState}from\"recoil\";import'../css/fixedNavBar.css';import{loggedInUser,chatActiveContact,chatMessages}from\"../atom/globalState\";import{getUsers}from\"../ApiUtil\";var stompClient=null;var style={objectFit:'cover',borderRadius:'50%',width:'40px',height:'40px'};function Chat(props){var user=useRecoilValue(loggedInUser);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),contacts=_useState2[0],setContacts=_useState2[1];var _useRecoilState=useRecoilState(chatMessages),_useRecoilState2=_slicedToArray(_useRecoilState,2),messages=_useRecoilState2[0],setMessages=_useRecoilState2[1];var _useRecoilState3=useRecoilState(chatActiveContact),_useRecoilState4=_slicedToArray(_useRecoilState3,2),activeContact=_useRecoilState4[0],setActiveContact=_useRecoilState4[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),text=_useState4[0],setText=_useState4[1];useEffect(function(){connect();loadContacts();},[]);useEffect(function(){if(activeContact===undefined)return;console.log(\"useEffect\",activeContact);DataServices.findChatMessages(activeContact.userSecondId,user.userId).then(function(msgs){return setMessages(msgs.data);}).catch(function(error){console.log(error.response);});loadContacts();},[activeContact]);var connect=function connect(){var Stomp=require(\"stompjs\");var SockJS=require(\"sockjs-client\");SockJS=new SockJS(\"/ws\");stompClient=Stomp.over(SockJS);stompClient.connect({},onConnected,onError);};var onError=function onError(err){console.log(err);};var onConnected=function onConnected(){console.log(\"connected\");console.log(\"connected user id \",user.userId);stompClient.subscribe(\"/user/\"+user.userId+\"/queue/messages\",onMessageReceived);};var sendMessage=function sendMessage(msg){if(msg.trim()!==\"\"){var _message={senderId:user.userId,recipientId:activeContact.userSecondId,// senderEmail: user.email,\n// recipientEmail: activeContact.lastName,\ncontent:msg,timestamp:new Date()};stompClient.send(\"/app/chat\",{},JSON.stringify(_message));var newMessages=_toConsumableArray(messages);newMessages.push(_message);setMessages(newMessages);}};var onMessageReceived=function onMessageReceived(msg){var notification=JSON.parse(msg.body);var active=JSON.parse(sessionStorage.getItem(\"recoil-persist\")).chatActiveContact;console.log(\"notification \",notification);console.log(\"active \",active);if(active.userSecondId==notification.userId){DataServices.findChatMessage(notification.chatNotificationId).then(function(message){var newMessages=JSON.parse(sessionStorage.getItem(\"recoil-persist\")).chatMessages;newMessages.push(message.data);setMessages(newMessages);console.log(\"chat active contact from recoil state \",activeContact);console.log(\"chat active contact from sessionStorage \",JSON.parse(sessionStorage.getItem(\"recoil-persist\")).chatActiveContact);console.log(\"newMessages \",newMessages);console.log(\"message \",message.data);}).catch(function(error){console.log(error.response);});}else{message.info(\"Received a new message from \"+notification.firstName+\" \"+notification.lastName);}loadContacts();};function loadContacts(){DataServices.getContacts().then(function(response){setContacts(response.data);if(JSON.parse(sessionStorage.getItem(\"recoil-persist\")).chatActiveContact===undefined&&response.data.length>0){// if(JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n// .chatActiveContact!== undefined){ setActiveContact(JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n// .chatActiveContact)}\nsetActiveContact(response.data[0]);console.log(\"set user0 active in if loop \",activeContact);console.log(\"user 0 \",response.data[0]);}});}return/*#__PURE__*/React.createElement(\"div\",{id:\"chat\",className:\"container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row marginFromTopForFixedNavbar\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4 friends\"},/*#__PURE__*/React.createElement(\"div\",{id:\"contacts\"},/*#__PURE__*/React.createElement(\"ul\",null,contacts.map(function(contact){return/*#__PURE__*/React.createElement(\"li\",{onClick:function onClick(){return setActiveContact(contact);},class:activeContact&&contact.userSecondId===activeContact.userSecondId?\"contact-active\":\"contact\"},/*#__PURE__*/React.createElement(\"div\",{class:\"wrap\"},/*#__PURE__*/React.createElement(\"span\",{class:\"contact-status online\"}),/*#__PURE__*/React.createElement(\"img\",{style:style,src:\"/api/profile/searchUsers/\"+contact.userSecondId,alt:\"\"}),/*#__PURE__*/React.createElement(\"div\",{class:\"meta\"},/*#__PURE__*/React.createElement(\"p\",{class:\"name\"},contact.firstName+\" \"+contact.lastName),contact.newMessages!==undefined&&contact.newMessages>0&&/*#__PURE__*/React.createElement(\"p\",{class:\"preview\"},contact.newMessages,\" new messages\"))));})))),/*#__PURE__*/React.createElement(\"div\",{class:\"col-md-8 chat-room\"},/*#__PURE__*/React.createElement(\"div\",{class:\"contact-profile\"},/*#__PURE__*/React.createElement(\"img\",{style:style,src:activeContact&&\"/api/profile/searchUsers/\"+activeContact.userSecondId,alt:\"\"}),/*#__PURE__*/React.createElement(\"p\",null,activeContact&&activeContact.firstName+\" \"+activeContact.lastName)),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ScrollToBottom,{className:\"messages\"},/*#__PURE__*/React.createElement(\"ul\",null,messages.map(function(msg){return/*#__PURE__*/React.createElement(\"li\",{class:msg.senderId===user.userId?\"sent\":\"replies\"},msg.senderId!==user.userId&&/*#__PURE__*/React.createElement(\"img\",{style:style,className:\"chat-image\",src:activeContact&&\"/api/profile/searchUsers/\"+activeContact.userSecondId,alt:\"\"}),/*#__PURE__*/React.createElement(\"p\",null,msg.content));})))),/*#__PURE__*/React.createElement(\"div\",{class:\"message-input\"},/*#__PURE__*/React.createElement(\"div\",{class:\"wrap\"},/*#__PURE__*/React.createElement(\"input\",{name:\"user_input\",size:\"large\",placeholder:\"Write your message...\",value:text,onChange:function onChange(event){return setText(event.target.value);},onKeyPress:function onKeyPress(event){if(event.key===\"Enter\"){sendMessage(text);setText(\"\");}}}),/*#__PURE__*/React.createElement(Button,{icon:/*#__PURE__*/React.createElement(\"i\",{class:\"fa fa-paper-plane\",\"aria-hidden\":\"true\"}),onClick:function onClick(){sendMessage(text);setText(\"\");}}))))));}export default Chat;","map":{"version":3,"sources":["/root/Spring-Social-Network/src/main/webapp/WEB-INF/jsp/react/src/pages/Chat.jsx"],"names":["React","useEffect","useState","DataServices","Button","message","ScrollToBottom","useRecoilValue","useRecoilState","loggedInUser","chatActiveContact","chatMessages","getUsers","stompClient","style","objectFit","borderRadius","width","height","Chat","props","user","contacts","setContacts","messages","setMessages","activeContact","setActiveContact","text","setText","connect","loadContacts","undefined","console","log","findChatMessages","userSecondId","userId","then","msgs","data","catch","error","response","Stomp","require","SockJS","over","onConnected","onError","err","subscribe","onMessageReceived","sendMessage","msg","trim","senderId","recipientId","content","timestamp","Date","send","JSON","stringify","newMessages","push","notification","parse","body","active","sessionStorage","getItem","findChatMessage","chatNotificationId","info","firstName","lastName","getContacts","length","map","contact","event","target","value","key"],"mappings":"gXAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CAEA,MAAOC,CAAAA,YAAP,KAAyB,0BAAzB,CAEA,OAASC,MAAT,CAAiBC,OAAjB,KAAgC,MAAhC,CACA,MAAOC,CAAAA,cAAP,KAA2B,wBAA3B,CACA,MAAO,YAAP,CACA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,QAA/C,CACA,MAAO,wBAAP,CAEA,OACIC,YADJ,CAEIC,iBAFJ,CAGIC,YAHJ,KAIO,qBAJP,CAMA,OAASC,QAAT,KAAyB,YAAzB,CAEA,GAAIC,CAAAA,WAAW,CAAG,IAAlB,CACA,GAAMC,CAAAA,KAAK,CAAG,CACVC,SAAS,CAAE,OADD,CAEVC,YAAY,CAAE,KAFJ,CAGVC,KAAK,CAAE,MAHG,CAIVC,MAAM,CAAE,MAJE,CAAd,CAOA,QAASC,CAAAA,IAAT,CAAcC,KAAd,CAAqB,CAGjB,GAAMC,CAAAA,IAAI,CAAGd,cAAc,CAACE,YAAD,CAA3B,CAHiB,cAIeP,QAAQ,CAAC,EAAD,CAJvB,wCAIVoB,QAJU,eAIAC,WAJA,mCAKef,cAAc,CAACG,YAAD,CAL7B,oDAKVa,QALU,qBAKAC,WALA,0CAMyBjB,cAAc,CAACE,iBAAD,CANvC,qDAMVgB,aANU,qBAMKC,gBANL,oCAOOzB,QAAQ,CAAC,EAAD,CAPf,yCAOV0B,IAPU,eAOJC,OAPI,eASjB5B,SAAS,CAAC,UAAM,CACZ6B,OAAO,GACPC,YAAY,GACf,CAHQ,CAGN,EAHM,CAAT,CAOA9B,SAAS,CAAC,UAAM,CACZ,GAAIyB,aAAa,GAAKM,SAAtB,CAAiC,OACjCC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBR,aAAzB,EACAvB,YAAY,CAACgC,gBAAb,CAA8BT,aAAa,CAACU,YAA5C,CAA0Df,IAAI,CAACgB,MAA/D,EAAuEC,IAAvE,CAA4E,SAACC,IAAD,QACxEd,CAAAA,WAAW,CAACc,IAAI,CAACC,IAAN,CAD6D,EAA5E,EAEEC,KAFF,CAEQ,SAAAC,KAAK,CAAI,CAAET,OAAO,CAACC,GAAR,CAAYQ,KAAK,CAACC,QAAlB,EAA6B,CAFhD,EAGAZ,YAAY,GACf,CAPQ,CAON,CAACL,aAAD,CAPM,CAAT,CAYA,GAAMI,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAClB,GAAMc,CAAAA,KAAK,CAAGC,OAAO,CAAC,SAAD,CAArB,CACA,GAAIC,CAAAA,MAAM,CAAGD,OAAO,CAAC,eAAD,CAApB,CACAC,MAAM,CAAG,GAAIA,CAAAA,MAAJ,CAAW,KAAX,CAAT,CACAjC,WAAW,CAAG+B,KAAK,CAACG,IAAN,CAAWD,MAAX,CAAd,CACAjC,WAAW,CAACiB,OAAZ,CAAoB,EAApB,CAAwBkB,WAAxB,CAAqCC,OAArC,EACH,CAND,CAQA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,GAAD,CAAS,CACrBjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,EACH,CAFD,CAIA,GAAMF,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtBf,OAAO,CAACC,GAAR,CAAY,WAAZ,EACAD,OAAO,CAACC,GAAR,CAAY,oBAAZ,CAAkCb,IAAI,CAACgB,MAAvC,EACAxB,WAAW,CAACsC,SAAZ,CACI,SAAW9B,IAAI,CAACgB,MAAhB,CAAyB,iBAD7B,CAEIe,iBAFJ,EAIH,CAPD,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,GAAD,CAAS,CACzB,GAAIA,GAAG,CAACC,IAAJ,KAAe,EAAnB,CAAuB,CACnB,GAAMlD,CAAAA,QAAO,CAAG,CACZmD,QAAQ,CAAEnC,IAAI,CAACgB,MADH,CAEZoB,WAAW,CAAE/B,aAAa,CAACU,YAFf,CAGZ;AACA;AACAsB,OAAO,CAAEJ,GALG,CAMZK,SAAS,CAAE,GAAIC,CAAAA,IAAJ,EANC,CAAhB,CAQA/C,WAAW,CAACgD,IAAZ,CAAiB,WAAjB,CAA8B,EAA9B,CAAkCC,IAAI,CAACC,SAAL,CAAe1D,QAAf,CAAlC,EAEA,GAAM2D,CAAAA,WAAW,oBAAOxC,QAAP,CAAjB,CACAwC,WAAW,CAACC,IAAZ,CAAiB5D,QAAjB,EACAoB,WAAW,CAACuC,WAAD,CAAX,CAEH,CACJ,CAjBD,CAmBA,GAAMZ,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACE,GAAD,CAAS,CAE/B,GAAMY,CAAAA,YAAY,CAAGJ,IAAI,CAACK,KAAL,CAAWb,GAAG,CAACc,IAAf,CAArB,CACA,GAAMC,CAAAA,MAAM,CAAGP,IAAI,CAACK,KAAL,CAAWG,cAAc,CAACC,OAAf,CAAuB,gBAAvB,CAAX,EACV7D,iBADL,CAGAuB,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BgC,YAA7B,EACAjC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBmC,MAAvB,EAEA,GAAIA,MAAM,CAACjC,YAAP,EAAuB8B,YAAY,CAAC7B,MAAxC,CAAgD,CAC5ClC,YAAY,CAACqE,eAAb,CAA6BN,YAAY,CAACO,kBAA1C,EAA8DnC,IAA9D,CAAmE,SAACjC,OAAD,CAAa,CAC5E,GAAM2D,CAAAA,WAAW,CAAGF,IAAI,CAACK,KAAL,CAAWG,cAAc,CAACC,OAAf,CAAuB,gBAAvB,CAAX,EACf5D,YADL,CAGAqD,WAAW,CAACC,IAAZ,CAAiB5D,OAAO,CAACmC,IAAzB,EACAf,WAAW,CAACuC,WAAD,CAAX,CAEA/B,OAAO,CAACC,GAAR,CAAY,wCAAZ,CAAsDR,aAAtD,EACAO,OAAO,CAACC,GAAR,CAAY,0CAAZ,CAAwD4B,IAAI,CAACK,KAAL,CAAWG,cAAc,CAACC,OAAf,CAAuB,gBAAvB,CAAX,EAAqD7D,iBAA7G,EAEAuB,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4B8B,WAA5B,EACA/B,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwB7B,OAAO,CAACmC,IAAhC,EACH,CAZD,EAYGC,KAZH,CAYS,SAAAC,KAAK,CAAI,CAAET,OAAO,CAACC,GAAR,CAAYQ,KAAK,CAACC,QAAlB,EAA6B,CAZjD,EAaH,CAdD,IAcO,CACHtC,OAAO,CAACqE,IAAR,CAAa,+BAAiCR,YAAY,CAACS,SAA9C,CAA0D,GAA1D,CAAgET,YAAY,CAACU,QAA1F,EACH,CACD7C,YAAY,GACf,CA3BD,CA6BA,QAASA,CAAAA,YAAT,EAAwB,CACpB5B,YAAY,CAAC0E,WAAb,GAA2BvC,IAA3B,CAAgC,SAAAK,QAAQ,CAAI,CACxCpB,WAAW,CAACoB,QAAQ,CAACH,IAAV,CAAX,CACA,GAAIsB,IAAI,CAACK,KAAL,CAAWG,cAAc,CAACC,OAAf,CAAuB,gBAAvB,CAAX,EACC7D,iBADD,GACuBsB,SADvB,EACoCW,QAAQ,CAACH,IAAT,CAAcsC,MAAd,CAAuB,CAD/D,CACkE,CAE9D;AACA;AACA;AAEAnD,gBAAgB,CAACgB,QAAQ,CAACH,IAAT,CAAc,CAAd,CAAD,CAAhB,CACAP,OAAO,CAACC,GAAR,CAAY,8BAAZ,CAA4CR,aAA5C,EACAO,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBS,QAAQ,CAACH,IAAT,CAAc,CAAd,CAAvB,EACH,CACJ,CAbD,EAeH,CAKD,mBACI,2BAAK,EAAE,CAAC,MAAR,CAAe,SAAS,CAAC,WAAzB,eACI,2BAAK,SAAS,CAAC,iCAAf,eACI,2BAAK,SAAS,CAAC,kBAAf,eACI,2BAAK,EAAE,CAAC,UAAR,eACI,8BACKlB,QAAQ,CAACyD,GAAT,CAAa,SAACC,OAAD,qBACV,0BACI,OAAO,CAAE,yBAAMrD,CAAAA,gBAAgB,CAACqD,OAAD,CAAtB,EADb,CAEI,KAAK,CACDtD,aAAa,EAAIsD,OAAO,CAAC5C,YAAR,GAAyBV,aAAa,CAACU,YAAxD,CACM,gBADN,CAEM,SALd,eAQI,2BAAK,KAAK,CAAC,MAAX,eACI,4BAAM,KAAK,CAAC,uBAAZ,EADJ,cAEI,2BAAK,KAAK,CAAEtB,KAAZ,CAAoB,GAAG,CAAE,4BAA4BkE,OAAO,CAAC5C,YAA7D,CAA2E,GAAG,CAAC,EAA/E,EAFJ,cAGI,2BAAK,KAAK,CAAC,MAAX,eACI,yBAAG,KAAK,CAAC,MAAT,EAAiB4C,OAAO,CAACL,SAAR,CAAoB,GAApB,CAA0BK,OAAO,CAACJ,QAAnD,CADJ,CAEKI,OAAO,CAAChB,WAAR,GAAwBhC,SAAxB,EACGgD,OAAO,CAAChB,WAAR,CAAsB,CADzB,eAEO,yBAAG,KAAK,CAAC,SAAT,EACKgB,OAAO,CAAChB,WADb,iBAJZ,CAHJ,CARJ,CADU,EAAb,CADL,CADJ,CADJ,CADJ,cA+BI,2BAAK,KAAK,CAAC,oBAAX,eACI,2BAAK,KAAK,CAAC,iBAAX,eACI,2BAAK,KAAK,CAAElD,KAAZ,CAAmB,GAAG,CAAEY,aAAa,EAAI,4BAA4BA,aAAa,CAACU,YAAnF,CAAiG,GAAG,CAAC,EAArG,EADJ,cAEI,6BAAIV,aAAa,EAAKA,aAAa,CAACiD,SAAd,CAA0B,GAA1B,CAAgCjD,aAAa,CAACkD,QAApE,CAFJ,CADJ,cAKI,4CACA,oBAAC,cAAD,EAAgB,SAAS,CAAC,UAA1B,eACI,8BACKpD,QAAQ,CAACuD,GAAT,CAAa,SAACzB,GAAD,qBACV,0BAAI,KAAK,CAAEA,GAAG,CAACE,QAAJ,GAAiBnC,IAAI,CAACgB,MAAtB,CAA+B,MAA/B,CAAwC,SAAnD,EACKiB,GAAG,CAACE,QAAJ,GAAiBnC,IAAI,CAACgB,MAAtB,eACI,2BAAK,KAAK,CAAEvB,KAAZ,CAAmB,SAAS,CAAC,YAA7B,CAA0C,GAAG,CAAEY,aAAa,EAAI,4BAA4BA,aAAa,CAACU,YAA1G,CAAwH,GAAG,CAAC,EAA5H,EAFT,cAII,6BAAIkB,GAAG,CAACI,OAAR,CAJJ,CADU,EAAb,CADL,CADJ,CADA,CALJ,cAqBI,2BAAK,KAAK,CAAC,eAAX,eACI,2BAAK,KAAK,CAAC,MAAX,eACI,6BACI,IAAI,CAAC,YADT,CAEI,IAAI,CAAC,OAFT,CAGI,WAAW,CAAC,uBAHhB,CAII,KAAK,CAAE9B,IAJX,CAKI,QAAQ,CAAE,kBAACqD,KAAD,QAAWpD,CAAAA,OAAO,CAACoD,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAlB,EALd,CAMI,UAAU,CAAE,oBAACF,KAAD,CAAW,CACnB,GAAIA,KAAK,CAACG,GAAN,GAAc,OAAlB,CAA2B,CACvB/B,WAAW,CAACzB,IAAD,CAAX,CACAC,OAAO,CAAC,EAAD,CAAP,CACH,CACJ,CAXL,EADJ,cAcI,oBAAC,MAAD,EACI,IAAI,cAAE,yBAAG,KAAK,CAAC,mBAAT,CAA6B,cAAY,MAAzC,EADV,CAEI,OAAO,CAAE,kBAAM,CACXwB,WAAW,CAACzB,IAAD,CAAX,CACAC,OAAO,CAAC,EAAD,CAAP,CACH,CALL,EAdJ,CADJ,CArBJ,CA/BJ,CADJ,CADJ,CAkFH,CAED,cAAeV,CAAAA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport DataServices from '../services/DataServices';\n\nimport { Button, message } from \"antd\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport './Chat.css';\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport '../css/fixedNavBar.css';\n\nimport {\n    loggedInUser,\n    chatActiveContact,\n    chatMessages,\n} from \"../atom/globalState\";\n\nimport { getUsers } from \"../ApiUtil\";\n\nvar stompClient = null;\nconst style = {\n    objectFit: 'cover',\n    borderRadius: '50%',\n    width: '40px',\n    height: '40px'\n};\n\nfunction Chat(props) {\n\n\n    const user = useRecoilValue(loggedInUser);\n    const [contacts, setContacts] = useState([]);\n    const [messages, setMessages] = useRecoilState(chatMessages);\n    const [activeContact, setActiveContact] = useRecoilState(chatActiveContact);\n    const [text, setText] = useState(\"\");\n\n    useEffect(() => {\n        connect();\n        loadContacts();\n    }, []);\n\n\n\n    useEffect(() => {\n        if (activeContact === undefined) return;\n        console.log(\"useEffect\", activeContact);\n        DataServices.findChatMessages(activeContact.userSecondId, user.userId).then((msgs) =>\n            setMessages(msgs.data)\n        ).catch(error => { console.log(error.response) });\n        loadContacts();\n    }, [activeContact]);\n\n\n\n\n    const connect = () => {\n        const Stomp = require(\"stompjs\");\n        var SockJS = require(\"sockjs-client\");\n        SockJS = new SockJS(\"/ws\");\n        stompClient = Stomp.over(SockJS);\n        stompClient.connect({}, onConnected, onError);\n    };\n\n    const onError = (err) => {\n        console.log(err);\n    };\n\n    const onConnected = () => {\n        console.log(\"connected\");\n        console.log(\"connected user id \", user.userId);\n        stompClient.subscribe(\n            \"/user/\" + user.userId + \"/queue/messages\",\n            onMessageReceived\n        );\n    };\n\n    const sendMessage = (msg) => {\n        if (msg.trim() !== \"\") {\n            const message = {\n                senderId: user.userId,\n                recipientId: activeContact.userSecondId,\n                // senderEmail: user.email,\n                // recipientEmail: activeContact.lastName,\n                content: msg,\n                timestamp: new Date(),\n            };\n            stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\n\n            const newMessages = [...messages];\n            newMessages.push(message);\n            setMessages(newMessages);\n\n        }\n    };\n\n    const onMessageReceived = (msg) => {\n\n        const notification = JSON.parse(msg.body);\n        const active = JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n            .chatActiveContact;\n\n        console.log(\"notification \", notification);\n        console.log(\"active \", active);\n\n        if (active.userSecondId == notification.userId) {\n            DataServices.findChatMessage(notification.chatNotificationId).then((message) => {\n                const newMessages = JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n                    .chatMessages;\n\n                newMessages.push(message.data);\n                setMessages(newMessages);\n\n                console.log(\"chat active contact from recoil state \", activeContact);\n                console.log(\"chat active contact from sessionStorage \", JSON.parse(sessionStorage.getItem(\"recoil-persist\")).chatActiveContact);\n\n                console.log(\"newMessages \", newMessages);\n                console.log(\"message \", message.data);\n            }).catch(error => { console.log(error.response) });\n        } else {\n            message.info(\"Received a new message from \" + notification.firstName + \" \" + notification.lastName);\n        }\n        loadContacts();\n    };\n\n    function loadContacts() {\n        DataServices.getContacts().then(response => {\n            setContacts(response.data);\n            if (JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n                .chatActiveContact === undefined && response.data.length > 0) {\n\n                // if(JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n                // .chatActiveContact!== undefined){ setActiveContact(JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n                // .chatActiveContact)}\n\n                setActiveContact(response.data[0]);\n                console.log(\"set user0 active in if loop \", activeContact);\n                console.log(\"user 0 \", response.data[0]);\n            }\n        }\n        );\n    }\n\n\n\n\n    return (\n        <div id=\"chat\" className=\"container\">\n            <div className=\"row marginFromTopForFixedNavbar\">\n                <div className=\"col-md-4 friends\">\n                    <div id=\"contacts\">\n                        <ul>\n                            {contacts.map((contact) => (\n                                <li\n                                    onClick={() => setActiveContact(contact)}\n                                    class={\n                                        activeContact && contact.userSecondId === activeContact.userSecondId\n                                            ? \"contact-active\"\n                                            : \"contact\"\n                                    }\n                                >\n                                    <div class=\"wrap\">\n                                        <span class=\"contact-status online\"></span>\n                                        <img style={style}  src={\"/api/profile/searchUsers/\"+contact.userSecondId} alt=\"\" />\n                                        <div class=\"meta\">\n                                            <p class=\"name\">{contact.firstName + \" \" + contact.lastName}</p>\n                                            {contact.newMessages !== undefined &&\n                                                contact.newMessages > 0 && (\n                                                    <p class=\"preview\">\n                                                        {contact.newMessages} new messages\n                                                    </p>\n                                                )}\n                                        </div>\n                                    </div>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n                <div class=\"col-md-8 chat-room\" >\n                    <div class=\"contact-profile\">\n                        <img style={style} src={activeContact && \"/api/profile/searchUsers/\"+activeContact.userSecondId} alt=\"\" />\n                        <p>{activeContact && (activeContact.firstName + \" \" + activeContact.lastName)}</p>\n                    </div>\n                    <div >\n                    <ScrollToBottom className=\"messages\">\n                        <ul>\n                            {messages.map((msg) => (\n                                <li class={msg.senderId === user.userId ? \"sent\" : \"replies\"}>\n                                    {msg.senderId !== user.userId && (\n                                         <img style={style} className=\"chat-image\" src={activeContact && \"/api/profile/searchUsers/\"+activeContact.userSecondId} alt=\"\" />\n                                    )}\n                                    <p>{msg.content}</p>\n                                </li>\n                            ))}\n\n                        </ul>\n\n                    </ScrollToBottom>\n                    </div>\n                    <div class=\"message-input\">\n                        <div class=\"wrap\">\n                            <input\n                                name=\"user_input\"\n                                size=\"large\"\n                                placeholder=\"Write your message...\"\n                                value={text}\n                                onChange={(event) => setText(event.target.value)}\n                                onKeyPress={(event) => {\n                                    if (event.key === \"Enter\") {\n                                        sendMessage(text);\n                                        setText(\"\");\n                                    }\n                                }}\n                            />\n                            <Button\n                                icon={<i class=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>}\n                                onClick={() => {\n                                    sendMessage(text);\n                                    setText(\"\");\n                                }}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}